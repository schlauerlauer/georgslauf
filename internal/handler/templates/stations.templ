package templates

import (
	"encoding/base64"
	"georgslauf/acl"
	"georgslauf/internal/db"
	"georgslauf/internal/settings"
	"strconv"
	"strings"
)

templ StationSettings(station db.GetStationsByTribeRow, set settings.Stations, csrf string, tribeId int64, categories []db.GetStationCategoriesRow, positions []db.StationPosition) {
	<div hx-swap-oob="innerHTML:#dash-tabs-station">
		// TODO add settings isEnabled
		<a role="tab" class="tab" hx-get="/stations/">Bewertungen</a>
		<a role="tab" class="tab tab-active" hx-get="/stations/settings">Posten</a>
	</div>
	// FIXME stations own view
	@DashStation(station, csrf, tribeId, set, categories, false, false, positions, true, []db.GetStationRolesDashRow{})
}

templ StationPointsTab(children templ.Component) {
	<div hx-swap-oob="innerHTML:#dash-tabs-station">
		// TODO add settings isEnabled
		<a role="tab" class="tab tab-active" hx-get="/stations/">Bewertungen</a>
		<a role="tab" class="tab" hx-get="/stations/settings">Posten</a>
	</div>
	@children
}

// NTH almost duplicate
templ StationRolesModal(accounts []db.GetUsersByTribeRoleRow, station db.GetStationNameRow, csrf string, stationRole acl.ACL, userRoles []db.GetStationRolesInStationRow, enableRoleEdit bool) {
	<dialog class="modal" _="on load me.showModal()">
		<div class="modal-box">
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
			</form>
			<h3 class="text-lg">Accounts am Posten</h3>
			if stationRole == acl.Edit {
				<div class="flex gap-3 mt-3 flex-col">
					for _, row := range userRoles {
						switch row.StationRole {
							case acl.Edit:
								<div class="badge badge-primary">
									if row.Firstname == "" {
										{ row.Email }
									} else {
										{ row.Firstname }
										{ row.Lastname }
									}
								</div>
							case acl.Admin:
								<div class="badge badge-secondary">
									if row.Firstname == "" {
										{ row.Email }
									} else {
										{ row.Firstname }
										{ row.Lastname }
									}
								</div>
							default:
								<div class="badge">
									if row.Firstname == "" {
										{ row.Email }
									} else {
										{ row.Firstname }
										{ row.Lastname }
									}
								</div>
						}
					}
				</div>
			}
			if stationRole == acl.Admin {
				<div class="mt-3">
					<form
						class="flex flex-col gap-y-1 max-w-xs"
						hx-get="/stations/roles"
						hx-target="#modal-container"
						hx-swap="innerHTML"
						hx-include="#tribe-id"
					>
						for _, row := range userRoles {
							switch row.StationRole {
								case acl.Edit:
									<button
										if enableRoleEdit {
											type="submit"
										} else {
											type="button"
										}
										class="btn btn-xs btn-primary"
										name="id"
										value={ strconv.FormatInt(row.ID, 10) }
									>
										{ row.Firstname }
										{ row.Lastname }
									</button>
								case acl.Admin:
									<button
										if enableRoleEdit {
											type="submit"
										} else {
											type="button"
										}
										class="btn btn-xs btn-secondary"
										name="id"
										value={ strconv.FormatInt(row.ID, 10) }
									>
										{ row.Firstname }
										{ row.Lastname }
									</button>
								default:
									<button
										if enableRoleEdit {
											type="submit"
										} else {
											type="button"
										}
										class="btn btn-xs"
										name="id"
										value={ strconv.FormatInt(row.ID, 10) }
									>
										{ row.Firstname }
										{ row.Lastname }
									</button>
							}
						}
					</form>
					if !enableRoleEdit {
						<h4>Bearbeitung ist ausgestellt</h4>
					}
				</div>
				if enableRoleEdit {
					<div class="mt-6">
						<h4>Account hinzufügen</h4>
						<form
							class="mt-6 space-y-6"
							hx-post="/stations/roles"
							hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
							hx-target="#modal-container"
							hx-swap="innerHTML"
							hx-include="#tribe-id"
						>
							<div>
								<h4 class="mb-3">Account</h4>
								<select autocomplete="off" required name="user" class="invalid:border-error select select-bordered">
									<option disabled selected value="">Keine</option>
									for _, entry := range accounts {
										<option value={ strconv.FormatInt(entry.ID, 10) }>
											{ entry.Email }
										</option>
									}
								</select>
							</div>
							<div>
								<h4 class="mb-3">Posten</h4>
								<div class="flex items-center gap-3">
									<div>
										<div class="font-bold">{ station.Name }</div>
									</div>
								</div>
							</div>
							<div class="flex justify-between gap-x-3">
								<p>Neue Rolle</p>
								<input autocomplete="off" type="hidden" name="station" value={ strconv.FormatInt(station.ID, 10) }/>
								<div class="join">
									<button class="join-item btn btn-sm btn-primary" type="submit" value="2" name="role">Normal</button>
									<button class="join-item btn btn-sm btn-secondary" type="submit" value="3" name="role">Erweitert</button>
								</div>
							</div>
							<p class="mt-3 font-light text-sm">
								"Erweitert" kann andere zum eigenen Posten hinzufügen / entfernen
							</p>
						</form>
					</div>
				}
			}
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
}

templ PointsList(points []db.GetPointsToGroupsRow, csrf string, station db.GetStationInfoRow, showAbbr bool, scoringEnabled bool, stationRole acl.ACL) {
	<div id="points-list">
		<div class="mb-6">
			<div class="stats shadow bg-base-200">
				<div class="stat">
					<div class="stat-figure text-primary">
						<span class="w-12 h-12 icon-[mdi--map-marker-outline]"></span>
					</div>
					<div class="stat-title">Posten { station.Position.String }</div>
					<div class="stat-value text-primary text-xl md:text-3xl">{ station.Name }</div>
					<div class="stat-desc">{ station.Tribe.String }</div>
				</div>
			</div>
		</div>
		<div class="join">
			<button
				class="btn btn-primary join-item"
				hx-target="#modal-container"
				hx-swap="innerHTML"
				hx-get="/stations/roles"
				hx-include="#tribe-id"
			>
				switch stationRole {
					case acl.Edit:
						Accounts anzeigen
					case acl.Admin:
						Accounts bearbeiten
				}
			</button>
			<button
				hx-get="/stations/reload"
				hx-swap="outerHTML"
				hx-target="#points-list"
				class="btn btn-secondary join-item"
			>
				Bewertungen Neuladen
			</button>
		</div>
		if scoringEnabled {
			<div class="overflow-x-auto">
				<table class="table">
					<thead>
						<tr>
							if showAbbr {
								<th>Laufgruppe</th>
							}
							<th>Gruppe</th>
							<th>Bewertungen</th>
						</tr>
					</thead>
					<tbody>
						for _, entry := range points {
							<tr>
								if showAbbr {
									<td>{ entry.Abbr.String }</td>
								}
								<td>
									<div class="font-bold">{ entry.Name }</div>
									<div class="flex items-center gap-x-3">
										<div class="text-sm opacity-50">
											switch entry.Grouping {
												case 0:
													Wölflinge
												case 1:
													Jupfis
												case 2:
													Pfadis
												case 3:
													Rover
											}
										</div>
										<div class="badge badge-xs">
											{ entry.Tribe.String }
											if entry.TribeIcon.Valid {
												<div class="avatar ml-1">
													<div class="w-4 rounded-full">
														<img
															src={ "/icon/tribe/" + strconv.FormatInt(entry.TribeIcon.Int64, 10) }
															alt="Avatar"
														/>
													</div>
												</div>
											}
										</div>
									</div>
								</td>
								<td>
									// TODO move hx attributes to parent
									<form
										hx-put="/stations/points"
										hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
										hx-swap="none"
										hx-trigger="input changed delay:250ms"
										_="on keydown[key is 'Enter'] halt the event"
									>
										<input autocomplete="off" type="hidden" name="group" value={ strconv.FormatInt(entry.Group, 10) }/>
										if entry.Points.Valid {
											<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value={ strconv.FormatInt(entry.Points.Int64, 10) }/>
										} else {
											<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value="0"/>
										}
									</form>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		} else {
			@ErrorMessage("Die Bewertungen sind ausgestellt")
		}
	</div>
}

// NTH almost duplicate of StationRoleModal
// TODO add notice if role is from different tribe
templ StationRoleModalStation(role db.GetStationRoleByIdRow, csrf string) {
	<dialog class="modal" _="on load me.showModal()">
		<div class="modal-box">
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
			</form>
			<h3 class="text-lg">Posten Berechtigung</h3>
			<div class="mt-6 space-y-6">
				<div>
					<h4 class="mb-3">Account</h4>
					<div class="flex items-center gap-3">
						if len(role.Image) > 0 {
							<div class="avatar">
								<div class="mask mask-squircle w-12">
									<img
										src={ "data:image/png;base64, " + base64.StdEncoding.EncodeToString(role.Image) }
										alt="Avatar"
									/>
								</div>
							</div>
						} else {
							<div class="avatar placeholder">
								<div class="bg-neutral text-neutral-content w-12 mask mask-squircle">
									if role.Firstname != "" && role.Lastname != "" {
										<span>{ strings.ToUpper(role.Firstname[0:1] + role.Lastname[0:1]) }</span>
									} else {
										<span>GL</span>
									}
								</div>
							</div>
						}
						<div>
							<div class="font-bold">{ role.Email }</div>
							<div class="text-sm opacity-50">{ role.Firstname } { role.Lastname }</div>
						</div>
					</div>
				</div>
				<div>
					<h4 class="mb-3">Posten</h4>
					<div class="flex items-center gap-3">
						<div>
							<div class="font-bold">{ role.StationName }</div>
						</div>
					</div>
				</div>
				<div>
					<div class="flex mb-3 items-center justify-between">
						<p>Aktuelle Rolle</p>
						switch role.StationRole {
							case acl.Edit:
								<div class="badge badge-primary">Normal</div>
							case acl.Admin:
								<div class="badge badge-secondary">Erweitert</div>
							default:
								<div class="badge">Unbekannt</div>
								// NTH acl.View acl.Edit
						}
					</div>
					<form
						class="flex justify-between gap-x-3"
						hx-put="/stations/roles"
						hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
						hx-target="#modal-container"
						hx-swap="innerHTML"
						hx-include="#tribe-id"
					>
						<p>Neue Rolle</p>
						<input autocomplete="off" type="hidden" name="id" value={ strconv.FormatInt(role.ID, 10) }/>
						<div class="join">
							<button class="join-item btn btn-sm btn-primary" type="submit" value="2" name="role">Normal</button>
							<button class="join-item btn btn-sm btn-secondary" type="submit" value="3" name="role">Erweitert</button>
						</div>
					</form>
					<p class="mt-3 font-light text-sm">
						"Erweitert" kann andere zum eigenen Posten hinzufügen / entfernen
					</p>
					<button
						class="mt-6 btn btn-sm btn-warning"
						type="button"
						hx-delete={ "/stations/roles/" + strconv.FormatInt(role.ID, 10) }
						hx-target="#modal-container"
						hx-swap="innerHTML"
						hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
						hx-include="#tribe-id"
					>
						Entfernen
					</button>
				</div>
			</div>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
}
