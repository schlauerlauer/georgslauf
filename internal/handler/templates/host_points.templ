package templates

import (
	"georgslauf/internal/db"
	"georgslauf/session"
	"strconv"
)

templ HostPointsToGroup(
	station db.GetStationInfoRow,
	showAbbr bool,
	csrf string,
	points []db.GetPointsToGroupsRow,
) {
	<div class="mb-6 stats shadow bg-base-200">
		<div class="stat">
			<div class="stat-figure text-primary">
				<span class="w-12 h-12 icon-[mdi--map-marker-outline]"></span>
			</div>
			<div class="stat-title">Posten { station.Position.String }</div>
			<div class="stat-value text-primary">{ station.Name }</div>
			<div class="stat-desc">{ station.Tribe.String }</div>
		</div>
	</div>
	<h2 class="mb-3">Bewertungen von Posten { station.Name } an die Gruppen</h2>
	// NTH almost copy of PointsList
	<div class="overflow-x-auto">
		<table class="table">
			<thead>
				<tr>
					if showAbbr {
						<th>Laufgruppe</th>
					}
					<th>Gruppe</th>
					<th>Bewertungen</th>
				</tr>
			</thead>
			<tbody>
				for _, entry := range points {
					<tr>
						if showAbbr {
							<td>{ entry.Abbr.String }</td>
						}
						<td>
							<div class="font-bold">{ entry.Name }</div>
							<div class="flex items-center gap-x-3">
								<div class="text-sm opacity-50">
									switch entry.Grouping {
										case 0:
											Wölflinge
										case 1:
											Jupfis
										case 2:
											Pfadis
										case 3:
											Rover
									}
								</div>
								<div class="badge badge-xs">
									{ entry.Tribe.String }
									if entry.TribeIcon.Valid {
										<div class="avatar ml-1">
											<div class="w-4 rounded-full">
												<img
													src={ "/icon/tribe/" + strconv.FormatInt(entry.TribeIcon.Int64, 10) }
													alt="Avatar"
												/>
											</div>
										</div>
									}
								</div>
							</div>
						</td>
						<td>
							// TODO move hx attributes to parent
							<form
								hx-put="/host/points/group"
								hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
								hx-swap="none"
								hx-trigger="input changed delay:250ms"
								hx-include="#station-select"
								_="on keydown[key is 'Enter'] halt the event"
							>
								<input autocomplete="off" type="hidden" name="group" value={ strconv.FormatInt(entry.Group, 10) }/>
								if entry.Points.Valid {
									<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value={ strconv.FormatInt(entry.Points.Int64, 10) }/>
								} else {
									<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value="0"/>
								}
							</form>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ HostPointsToStation(
	group db.GetGroupInfoRow,
	csrf string,
	points []db.GetPointsToStationsRow,
	useCategories bool,
) {
	<div class="mb-6 stats shadow bg-base-200">
		<div class="stat">
			<div class="stat-figure text-primary">
				<span class="w-12 h-12 icon-[fluent--run-20-regular]"></span>
			</div>
			<div class="stat-title">Gruppe { group.Abbr.String }</div>
			<div class="stat-value text-primary">{ group.Name }</div>
			<div class="stat-desc">{ group.Tribe.String }</div>
		</div>
	</div>
	<h2 class="mb-3">Bewertungen von Gruppe { group.Name } an die Posten</h2>
	// NTH almost copy of PointsList
	<div class="overflow-x-auto">
		<table class="table">
			<thead>
				<tr>
					<th>Position</th>
					// if useCategories {
					// <th>Kategorie</th>
					// }
					<th>Posten</th>
					<th>Bewertungen</th>
				</tr>
			</thead>
			<tbody>
				for _, entry := range points {
					<tr>
						<td>{ entry.Position.String }</td>
						// if useCategories {
						// <td>{ entry.Abbr.String }</td>
						// }
						<td>
							<div class="font-bold">{ entry.Name }</div>
							<div class="badge badge-xs">
								{ entry.Tribe.String }
								if entry.TribeIcon.Valid {
									<div class="avatar ml-1">
										<div class="w-4 rounded-full">
											<img
												src={ "/icon/tribe/" + strconv.FormatInt(entry.TribeIcon.Int64, 10) }
												alt="Avatar"
											/>
										</div>
									</div>
								}
							</div>
						</td>
						<td>
							// TODO move hx attributes to parent
							<form
								hx-put="/host/points/station"
								hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
								hx-swap="none"
								hx-trigger="input changed delay:250ms"
								hx-include="#group-select"
								_="on keydown[key is 'Enter'] halt the event"
							>
								<input autocomplete="off" type="hidden" name="station" value={ strconv.FormatInt(entry.Station, 10) }/>
								if entry.Points.Valid {
									<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value={ strconv.FormatInt(entry.Points.Int64, 10) }/>
								} else {
									<input autocomplete="off" class="input w-full max-w-xs font-bold invalid:border-error" type="number" name="points" max="100" min="0" value="0"/>
								}
							</form>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ HostPoints(
	htmxRequest bool,
	user *session.UserData,
	csrf string,
	stations []db.GetStationsHostRow,
	groups []db.GetGroupsHostRow,
) {
	@base(htmxRequest, user, -1, false) {
		<div class="mt-6 mx-auto px-3 max-w-screen-lg">
			<div
				role="tablist"
				class="tabs tabs-bordered"
				hx-swap="innerHTML"
				hx-target="main"
				hx-push-url="true"
			>
				<a role="tab" class="tab" hx-get="/host/tribes">Übersicht</a>
				<a role="tab" class="tab" hx-get="/host/groups">Gruppen</a>
				<a role="tab" class="tab" hx-get="/host/stations">Posten</a>
				<a role="tab" class="tab" hx-get="/host/users">Accounts</a>
				<a role="tab" class="tab tab-active" hx-get="/host/points">Bewertungen</a>
				<a role="tab" class="tab" hx-get="/host/results/stations">Auswertung</a>
				<a role="tab" class="tab" hx-get="/host/settings">Einstellungen</a>
			</div>
			<div class="mt-6">
				<form
					class="flex w-full max-w-md gap-x-3"
					hx-get="/host/points/details"
					hx-trigger="input"
					hx-target="#points-table"
					hx-swap="innerHTML"
				>
					<div class="w-full">
						<div class="label">
							<span class="label-text">Posten</span>
						</div>
						<select
							id="station-select"
							autocomplete="off"
							name="station"
							class="select select-bordered w-full"
							_="on input set #group-select.options[0].selected to true"
						>
							<option value="" selected></option>
							for _, entry := range stations {
								<option value={ strconv.FormatInt(entry.ID, 10) }>{ entry.Name }</option>
							}
						</select>
					</div>
					<div class="w-full">
						<div class="label">
							<span class="label-text">Gruppe</span>
						</div>
						<select
							id="group-select"
							autocomplete="off"
							name="group"
							class="select select-bordered w-full"
							_="on input set #station-select.options[0].selected to true"
						>
							<option value="" selected></option>
							for _, entry := range groups {
								<option value={ strconv.FormatInt(entry.ID, 10) }>{ entry.Name }</option>
							}
						</select>
					</div>
				</form>
			</div>
			<div id="points-table" class="mt-9"></div>
		</div>
	}
}
