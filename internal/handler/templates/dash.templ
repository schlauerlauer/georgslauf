package templates

import (
	"database/sql"
	"encoding/base64"
	"fmt"
	"georgslauf/internal/db"
	"georgslauf/internal/settings"
	"georgslauf/session"
	"strconv"
	"time"
)

templ PutStation(updatedAt time.Time, stationId int64, stationName string, firstname string, hasIcon bool, categoryName sql.NullString, enableCategories bool) {
	@AlertSuccess("Gespeichert")
	<div class="flex justify-between place-items-center">
		<span>{ stationName }</span>
		if categoryName.Valid && enableCategories {
			<span class="text-sm font-light">{ categoryName.String }</span>
		}
	</div>
	<div hx-swap-oob={ "innerHTML:#badge-" + strconv.FormatInt(stationId, 10) }>
		<div class="badge badge-accent">
			if time.Since(updatedAt) > time.Hour * 12 {
				<span class="hidden sm:block mr-1">Zuletzt geändert</span>
				<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
				{ updatedAt.Format("02.01. 15:04") }
			} else {
				<span class="hidden sm:block mr-1">Zuletzt geändert</span>
				<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
				{ updatedAt.Format("15:04") }
			}
			von { firstname }
			if hasIcon {
				<div class="avatar ml-1">
					<div class="w-4 rounded-full">
						<img
							src="/icon/user"
							alt="Avatar"
						/>
					</div>
				</div>
			}
		</div>
	</div>
}

templ DashNewStation(csrf string, tribeId int64, set settings.Stations, categories []db.GetStationCategoriesRow) {
	<details class="collapse collapse-arrow bg-base-200" open>
		<summary class="collapse-title text-xl font-medium">
			<div class="flex justify-between place-items-center">
				<span>Neuer Posten</span>
			</div>
		</summary>
		<div class="collapse-content">
			<form
				class="space-y-4"
				hx-post="/dash/stations"
				hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
				hx-swap="outerHTML"
				hx-target="closest details"
			>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Name</span>
					</div>
					<input required name="name" minlength="3" maxlength="30" type="text" placeholder="Name" class="invalid:border-error input input-bordered w-full max-w-xs" autocomplete="off"/>
					<input type="hidden" name="tribe" value={ strconv.FormatInt(tribeId, 10) }/>
				</label>
				if set.EnableCategories {
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Kategorie</span>
						</div>
						<select required name="category" class="invalid:border-error select select-bordered">
							<option disabled selected value="">Keine</option>
							for _, cat := range categories {
								<option value={ strconv.FormatInt(cat.ID, 10) }>
									if cat.Max > 0 {
										{ cat.Name + fmt.Sprintf(" (%d/%d)", cat.Count, cat.Max) }
									} else {
										{ cat.Name }
									}
								</option>
							}
						</select>
					</label>
				}
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Bevorzugter Standort</span>
						<span class="label-text-alt">
							siehe
							<a class="link" rel="noopener noreferrer" target="_blank" href="/res/Posten Standorte.pdf">
								Dokument
							</a>
						</span>
					</div>
					<select
						name="prefLoc"
						class="invalid:border-error select select-bordered"
						autocomplete="off"
					>
						<option value="">Keinen</option>
						<option value="A">A</option>
						<option value="B">B</option>
						<option value="C">C</option>
						<option value="D">D</option>
						<option value="E">E</option>
						<option value="F">F</option>
						<option value="G">G</option>
						<option value="H">H</option>
						<option value="I">I</option>
						<option value="J">J</option>
						<option value="K">K</option>
						<option value="L">L</option>
						<option value="M">M</option>
						<option value="N">N</option>
						<option value="O">O</option>
						<option value="P">P</option>
						<option value="Q">Q</option>
						<option value="R">R</option>
						<option value="S">S</option>
						<option value="T">T</option>
					</select>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Personen</span>
					</div>
					<input name="size" type="number" class="input input-bordered w-full max-w-xs" min="1" max="20" value="1" step="1"/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Beschreibung</span>
					</div>
					<textarea name="description" maxlength="1024" class="textarea textarea-bordered h-24" placeholder="Beschreibung"></textarea>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Kommentar</span>
					</div>
					<textarea name="requirements" maxlength="1024" class="textarea textarea-bordered h-24" placeholder="Kommentar"></textarea>
					<div class="label">
						<span class="label-text-alt">Allergien, Benötigtes Material, Ort, Sonstiges</span>
					</div>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Vegan</span>
					</div>
					<input name="vegan" type="number" class="input input-bordered w-full max-w-xs" min="0" max="20" value="0" step="1"/>
				</label>
				<div class="flex justify-between items-end">
					<div class="flex gap-x-2">
						if set.AllowCreate {
							<button type="submit" class="btn btn-primary">
								Speichern
							</button>
						} else {
							<div class="tooltip" data-tip="Aktualisierung ausgeschaltet">
								<button
									type="button"
									class="btn btn-primary btn-disabled"
								>
									Speichern
								</button>
							</div>
						}
					</div>
				</div>
			</form>
		</div>
	</details>
}

templ DashStation(station db.GetStationsByTribeRow, csrf string, tribeId int64, set settings.Stations, categories []db.GetStationCategoriesRow, self bool, hasPicture bool) {
	<details class="collapse collapse-arrow bg-base-200">
		<summary class="collapse-title text-xl font-medium">
			<div class="flex justify-between place-items-center">
				<span>{ station.Name }</span>
				if station.CategoryName.Valid && set.EnableCategories {
					<span class="text-sm font-light">{ station.CategoryName.String }</span>
				}
			</div>
		</summary>
		<div class="collapse-content">
			<form
				class="space-y-4"
				hx-put="/dash/stations"
				hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
				hx-swap="innerHTML"
				hx-target="previous summary"
				hx-disinherit="*"
			>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Name</span>
					</div>
					<input required name="name" minlength="3" maxlength="30" type="text" placeholder="Name" class="invalid:border-error input input-bordered w-full max-w-xs" autocomplete="off" value={ station.Name }/>
					<input type="hidden" autocomplete="off" name="tribe" value={ strconv.FormatInt(tribeId, 10) }/>
					<input type="hidden" autocomplete="off" name="station" value={ strconv.FormatInt(station.ID, 10) }/>
				</label>
				if set.EnableCategories {
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Kategorie</span>
						</div>
						<select required name="category" class="invalid:border-error select select-bordered">
							if station.CategoryID.Valid {
								<option selected value={ strconv.FormatInt(station.CategoryID.Int64, 10) }>{ station.CategoryName.String }</option>
							} else {
								<option disabled selected value="">Keine</option>
							}
							for _, cat := range categories {
								<option value={ strconv.FormatInt(cat.ID, 10) }>
									if cat.Max > 0 {
										{ cat.Name + fmt.Sprintf(" (%d/%d)", cat.Count, cat.Max) }
									} else {
										{ cat.Name }
									}
								</option>
							}
						</select>
					</label>
				}
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Bevorzugter Standort</span>
						<span class="label-text-alt">
							siehe
							<a class="link" rel="noopener noreferrer" target="_blank" href="/res/Posten Standorte.pdf">
								Dokument
							</a>
						</span>
					</div>
					<select
						name="prefLoc"
						class="invalid:border-error select select-bordered"
						autocomplete="off"
					>
						if station.PrefLoc.Valid {
							<option selected value={ station.PrefLoc.String }>{ station.PrefLoc.String }</option>
						}
						<option value="">Keinen</option>
						<option value="A">A</option>
						<option value="B">B</option>
						<option value="C">C</option>
						<option value="D">D</option>
						<option value="E">E</option>
						<option value="F">F</option>
						<option value="G">G</option>
						<option value="H">H</option>
						<option value="I">I</option>
						<option value="J">J</option>
						<option value="K">K</option>
						<option value="L">L</option>
						<option value="M">M</option>
						<option value="N">N</option>
						<option value="O">O</option>
						<option value="P">P</option>
						<option value="Q">Q</option>
						<option value="R">R</option>
						<option value="S">S</option>
						<option value="T">T</option>
					</select>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Personen</span>
					</div>
					<input autocomplete="off" name="size" type="number" class="input input-bordered w-full max-w-xs" min="1" max="20" value={ strconv.FormatInt(max(station.Size, 1), 10) } step="1"/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Beschreibung</span>
					</div>
					<textarea autocomplete="off" name="description" maxlength="1024" class="textarea textarea-bordered h-24" placeholder="Beschreibung">{ station.Description.String }</textarea>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Kommentar</span>
					</div>
					<textarea autocomplete="off" name="requirements" maxlength="1024" class="textarea textarea-bordered h-24" placeholder="Beschreibung">{ station.Description.String }</textarea>
					<div class="label">
						<span class="label-text-alt">Allergien, Benötigtes Material, Ort, Sonstiges</span>
					</div>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Vegan</span>
					</div>
					<input autocomplete="off" name="vegan" type="number" class="input input-bordered w-full max-w-xs" min="0" max="20" value={ strconv.FormatInt(max(station.Vegan, 1), 10) } step="1"/>
				</label>
				// TODO image
				<div class="flex justify-between items-end flex-wrap gap-y-3">
					<div class="flex gap-x-2">
						if set.AllowUpdate {
							<button type="submit" class="btn btn-primary">
								Speichern
							</button>
						} else {
							<div class="tooltip" data-tip="Aktualisierung ausgeschaltet">
								<button
									type="button"
									class="btn btn-primary btn-disabled"
								>
									Speichern
								</button>
							</div>
						}
						if set.AllowDelete {
							<form
								hx-disinherit="*"
							>
								<button
									type="button"
									class="btn btn-error"
									hx-delete={ "/dash/stations/" + strconv.FormatInt(station.ID, 10) }
									hx-target="closest details"
									hx-swap="outerHTML"
									hx-include="#tribe-id"
								>
									Entfernen
								</button>
							</form>
						} else {
							<div class="tooltip" data-tip="Entfernen ausgeschaltet">
								<button
									type="button"
									class="btn btn-error btn-disabled"
								>
									Entfernen
								</button>
							</div>
						}
					</div>
					<div id={ "badge-" + strconv.FormatInt(station.ID, 10) } class="flex">
						<div class="badge badge-accent">
							if t := time.Unix(station.UpdatedAt, 0); time.Since(t) > time.Hour * 12 {
								<span class="hidden sm:block mr-1">Zuletzt geändert</span>
								<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
								{ time.Unix(station.UpdatedAt, 0).Format("02.01. 15:04") }
							} else {
								<span class="hidden sm:block mr-1">Zuletzt geändert</span>
								<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
								{ time.Unix(station.UpdatedAt, 0).Format("15:04") }
							}
							if station.Firstname.Valid {
								von { station.Firstname.String }
								if len(station.UserImage) > 0 {
									<div class="avatar ml-1">
										<div class="w-4 rounded-full">
											<img
												src={ "data:image/png;base64, " + base64.StdEncoding.EncodeToString(station.UserImage) }
												alt="Avatar"
											/>
										</div>
									</div>
								} else if self && hasPicture {
									<div class="avatar ml-1">
										<div class="w-4 rounded-full">
											<img
												src="/icon/user"
												alt="Avatar"
											/>
										</div>
									</div>
								}
							}
						</div>
					</div>
				</div>
			</form>
		</div>
	</details>
}

templ DashStations(tribeId int64, stations []db.GetStationsByTribeRow, set settings.Stations, csrf string, categories []db.GetStationCategoriesRow) {
	// TODO station role different tabs
	<div hx-swap-oob="innerHTML:#dash-tablist">
		<a role="tab" class="tab" hx-get="/dash/groups">Gruppen</a>
		<a role="tab" class="tab tab-active" hx-get="/dash/stations">Posten</a>
	</div>
	<div>
		<h2 class="text-lg mb-3">Angemeldete Posten</h2>
		<div class="space-y-3">
			for _, station := range stations {
				@DashStation(station, csrf, tribeId, set, categories, false, false)
			}
			if set.AllowCreate {
				<button
					class="btn btn-secondary"
					hx-get="/dash/stations/new"
					hx-swap="beforebegin"
					hx-include="#tribe-id"
				>
					Neuen Posten anmelden
				</button>
			} else {
				<button class="btn btn-disabled">Posten anmelden deaktiviert</button>
			}
		</div>
	</div>
	<div class="mt-9 card bg-base-200 w-96 shadow-xl">
		<div class="card-body">
			<h2 class="card-title">Posten Standorte</h2>
			<p>Mögliche Standorte ansehen</p>
			<div class="card-actions justify-end">
				<a rel="noopener noreferrer" target="_blank" href="/res/Posten Standorte.pdf">
					<button class="btn btn-primary">
						<span class="text-2xl icon-[mingcute--pdf-line]"></span>
					</button>
				</a>
			</div>
		</div>
	</div>
}

func max(a, b int64) int64 {
	if a > b {
		return a
	}
	return b
}

templ PutGroup(updatedAt time.Time, groupId int64, groupName string, grouping int64, firstname string, hasIcon bool) {
	@AlertSuccess("Gespeichert")
	<div class="flex justify-between place-items-center">
		<span>{ groupName }</span>
		@groupGrouping(grouping)
	</div>
	<div hx-swap-oob={ "innerHTML:#badge-" + strconv.FormatInt(groupId, 10) }>
		<div class="badge badge-accent">
			if time.Since(updatedAt) > time.Hour * 12 {
				<span class="hidden sm:block mr-1">Zuletzt geändert</span>
				<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
				{ updatedAt.Format("02.01. 15:04") }
			} else {
				<span class="hidden sm:block mr-1">Zuletzt geändert</span>
				<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
				{ updatedAt.Format("15:04") }
			}
			von { firstname }
			if hasIcon {
				<div class="avatar ml-1">
					<div class="w-4 rounded-full">
						<img
							src="/icon/user"
							alt="Avatar"
						/>
					</div>
				</div>
			}
		</div>
	</div>
}

templ groupGrouping(grouping int64) {
	<div class="flex place-items-baseline text-sm font-light">
		switch grouping {
			case 0:
				<span>Wölflinge</span>
				<div class="h-3 w-3 rounded-full ml-1 bg-orange-500"></div>
			case 1:
				<span>Jupfis</span>
				<div class="h-3 w-3 rounded-full ml-1 bg-blue-700"></div>
			case 2:
				<span>Pfadis</span>
				<div class="h-3 w-3 rounded-full ml-1 bg-emerald-700"></div>
			case 3:
				<span>Rover</span>
				<div class="h-3 w-3 rounded-full ml-1 bg-red-700"></div>
		}
	</div>
}

templ DashNewGroup(csrf string, tribeId int64, set settings.Groups) {
	<details class="collapse collapse-arrow bg-base-200" open>
		<summary class="collapse-title text-xl font-medium">
			<div class="flex justify-between place-items-center">
				<span>Neue Gruppe</span>
			</div>
		</summary>
		<div class="collapse-content">
			<form
				class="space-y-6"
				hx-post="/dash/groups"
				hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
				hx-swap="outerHTML"
				hx-target="closest details"
			>
				<input type="hidden" name="tribe" value={ strconv.FormatInt(tribeId, 10) }/>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Name</span>
					</div>
					<input required name="name" minlength="3" maxlength="30" type="text" placeholder="Name" class="invalid:border-error input input-bordered w-full max-w-xs" autocomplete="off"/>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Stufe</span>
					</div>
					<select required name="grouping" class="invalid:border-error select select-bordered">
						<option value="" selected disabled>Auswählen</option>
						<option value="0">Wölflinge</option>
						<option value="1">Jupfis</option>
						<option value="2">Pfadis</option>
						<option value="3">Rover</option>
					</select>
				</label>
				<label class="form-control w-full">
					<div class="label">
						<span class="label-text">Gruppen Größe</span>
					</div>
					<input name="size" type="range" min={ strconv.FormatInt(set.Min, 10) } max={ strconv.FormatInt(set.Max, 10) } value={ strconv.FormatInt(set.Min, 10) } class="range" step="1"/>
					<div class="flex w-full justify-between px-2 pt-1 text-xs">
						for num := range set.Max - set.Min + 1 {
							<span>{ strconv.FormatInt(num + set.Min, 10) }</span>
						}
					</div>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Vegan</span>
					</div>
					<input name="vegan" type="number" class="input input-bordered w-full max-w-xs" min="0" max="20" step="1" value="0"/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Kommentar</span>
					</div>
					<textarea name="comment" maxlength="1024" class="textarea textarea-bordered h-24" placeholder="Kommentar"></textarea>
					<div class="label">
						<span class="label-text-alt">Allergien, Sonstiges</span>
					</div>
				</label>
				<div class="flex justify-between items-end">
					<button type="submit" class="btn btn-primary">
						Speichern
					</button>
				</div>
			</form>
		</div>
	</details>
}

templ DashGroup(group db.GetGroupsByTribeRow, csrf string, tribeId int64, set settings.Groups, self bool, hasPicture bool) {
	<details class="collapse collapse-arrow bg-base-200">
		<summary class="collapse-title text-xl font-medium">
			<div class="flex justify-between place-items-center">
				<span>{ group.Name }</span>
				@groupGrouping(group.Grouping)
			</div>
		</summary>
		<div class="collapse-content">
			<form
				class="space-y-6"
				hx-put="/dash/groups"
				hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
				hx-swap="innerHTML"
				hx-target="previous summary"
				hx-disinherit="*"
			>
				<input autocomplete="off" type="hidden" name="tribe" value={ strconv.FormatInt(tribeId, 10) }/>
				<input autocomplete="off" type="hidden" name="group" value={ strconv.FormatInt(group.ID, 10) }/>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Name</span>
					</div>
					<input required name="name" minlength="3" maxlength="30" type="text" placeholder="Name" class="invalid:border-error input input-bordered w-full max-w-xs" autocomplete="off" value={ group.Name }/>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Stufe</span>
					</div>
					<select autocomplete="off" required name="grouping" class="invalid:border-error select select-bordered">
						switch group.Grouping {
							case 0:
								<option selected value="0">Wölflinge</option>
								<option value="1">Jupfis</option>
								<option value="2">Pfadis</option>
								<option value="3">Rover</option>
							case 1:
								<option value="0">Wölflinge</option>
								<option selected value="1">Jupfis</option>
								<option value="2">Pfadis</option>
								<option value="3">Rover</option>
							case 2:
								<option value="0">Wölflinge</option>
								<option value="1">Jupfis</option>
								<option selected value="2">Pfadis</option>
								<option value="3">Rover</option>
							case 3:
								<option value="0">Wölflinge</option>
								<option value="1">Jupfis</option>
								<option value="2">Pfadis</option>
								<option selected value="3">Rover</option>
							default:
								<option value="" selected disabled>Auswählen</option>
								<option value="0">Wölflinge</option>
								<option value="1">Jupfis</option>
								<option value="2">Pfadis</option>
								<option value="3">Rover</option>
						}
					</select>
				</label>
				<label class="form-control w-full">
					<div class="label">
						<span class="label-text">Gruppen Größe</span>
					</div>
					<input autocomplete="off" name="size" type="range" min={ strconv.FormatInt(set.Min, 10) } max={ strconv.FormatInt(set.Max, 10) } value={ strconv.FormatInt(max(group.Size.Int64, set.Min), 10) } class="range" step="1"/>
					<div class="flex w-full justify-between px-2 pt-1 text-xs">
						for num := range set.Max - set.Min + 1 {
							<span>{ strconv.FormatInt(num + set.Min, 10) }</span>
						}
					</div>
				</label>
				<label class="form-control w-full max-w-xs">
					<div class="label">
						<span class="label-text">Anzahl Vegan</span>
					</div>
					<input autocomplete="off" name="vegan" type="number" class="input input-bordered w-full max-w-xs" min="0" max="20" value={ strconv.FormatInt(group.Vegan, 10) } step="1"/>
				</label>
				<label class="form-control">
					<div class="label">
						<span class="label-text">Kommentar</span>
					</div>
					<textarea autocomplete="off" name="comment" class="textarea textarea-bordered h-24" placeholder="Kommentar">{ group.Comment.String }</textarea>
					<div class="label">
						<span class="label-text-alt">Allergien, Sonstiges</span>
					</div>
				</label>
				// TODO image
				<div class="flex justify-between items-end flex-wrap gap-y-3">
					<div class="flex gap-x-2">
						if set.AllowUpdate {
							<button type="submit" class="btn btn-primary">
								Speichern
							</button>
						} else {
							<div class="tooltip" data-tip="Aktualisierung ausgeschaltet">
								<button
									type="button"
									class="btn btn-primary btn-disabled"
								>
									Speichern
								</button>
							</div>
						}
						if set.AllowDelete {
							<form
								hx-disinherit="*"
							>
								<button
									hx-delete={ "/dash/groups/" + strconv.FormatInt(group.ID, 10) }
									hx-target="closest details"
									hx-swap="outerHTML"
									hx-include="#tribe-id"
									type="button"
									class="btn btn-error"
								>
									Entfernen
								</button>
							</form>
						} else {
							<div class="tooltip" data-tip="Entfernen ausgeschaltet">
								<button
									type="button"
									class="btn btn-error btn-disabled"
								>
									Entfernen
								</button>
							</div>
						}
					</div>
					<div id={ "badge-" + strconv.FormatInt(group.ID, 10) } class="flex">
						<div class="badge badge-accent">
							if t := time.Unix(group.UpdatedAt, 0); time.Since(t) > time.Hour * 12 {
								<span class="hidden sm:block mr-1">Zuletzt geändert</span>
								<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
								{ time.Unix(group.UpdatedAt, 0).Format("02.01. 15:04") }
							} else {
								<span class="hidden sm:block mr-1">Zuletzt geändert</span>
								<span class="sm:hidden text-sm icon-[material-symbols--edit-outline-rounded] mr-1"></span>
								{ time.Unix(group.UpdatedAt, 0).Format("15:04") }
							}
							if group.Firstname.Valid {
								von { group.Firstname.String }
								if len(group.UserImage) > 0 {
									<div class="avatar ml-1">
										<div class="w-4 rounded-full">
											<img
												src={ "data:image/png;base64, " + base64.StdEncoding.EncodeToString(group.UserImage) }
												alt="Avatar"
											/>
										</div>
									</div>
								} else if self && hasPicture {
									<div class="avatar ml-1">
										<div class="w-4 rounded-full">
											<img
												src="/icon/user"
												alt="Avatar"
											/>
										</div>
									</div>
								}
							}
						</div>
					</div>
				</div>
			</form>
		</div>
	</details>
}

templ DashGroups(tribeId int64, groups []db.GetGroupsByTribeRow, set settings.Groups, csrf string) {
	// TODO station role
	<div hx-swap-oob="innerHTML:#dash-tablist">
		<a role="tab" class="tab tab-active" hx-get="/dash/groups">Gruppen</a>
		<a role="tab" class="tab" hx-get="/dash/stations">Posten</a>
	</div>
	<div>
		<h2 class="text-lg mb-3">Angemeldete Gruppen</h2>
		<div class="space-y-3">
			for _, group := range groups {
				@DashGroup(group, csrf, tribeId, set, false, false)
			}
			if set.AllowCreate {
				<button
					class="btn btn-secondary"
					hx-get="/dash/groups/new"
					hx-swap="beforebegin"
					hx-include="#tribe-id"
				>Neue Gruppe anmelden</button>
			} else {
				<button class="btn btn-disabled">Gruppen anmelden deaktiviert</button>
			}
		</div>
	</div>
}

templ Dash(htmxRequest bool, user *session.UserData, tribeId int64, hasIcon bool, isEdit bool, isAdmin bool) {
	@base(htmxRequest, user, tribeId, hasIcon) {
		<div class="mt-6 mx-auto px-3 max-w-screen-lg">
			// TODO change active tab; push-url
			// hx-push-url="true"
			<div
				id="dash-tablist"
				role="tablist"
				class="tabs tabs-bordered"
				hx-swap="innerHTML"
				hx-target="#dash-tab"
				hx-include="#tribe-id"
			>
				if isEdit || isAdmin {
					<a role="tab" class="tab tab-active" hx-get="/dash/groups" hx-trigger="load once, click">Gruppen</a>
					<a role="tab" class="tab" hx-get="/dash/stations">Posten</a>
				}
			</div>
			<div id="dash-tab" class="pt-6"></div>
		</div>
	}
}

templ TribeRoleSelect(htmxRequest bool, user *session.UserData, tribes []db.GetTribesRow, csrf string) {
	@base(htmxRequest, user, -1, false) {
		<div class="mt-6 mx-auto px-3 max-w-screen-lg">
			<h1 class="text-xl">Stamm auswählen</h1>
			<div class="mt-6">
				<div class="overflow-x-auto max-w-screen-md mx-auto">
					<table class="table">
						<thead>
							<tr>
								<th></th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							for _, tribe := range tribes {
								<tr>
									<td>
										<div class="flex items-center gap-3">
											if tribe.Icon.Valid {
												<label class="avatar cursor-pointer">
													<div class="h-12 w-12">
														<img
															src={ "/icon/tribe/" + strconv.FormatInt(tribe.ID, 10) }
															alt={ tribe.Name + " Icon" }
														/>
													</div>
												</label>
											} else {
												<label class="avatar placeholder">
													<div class="mask mask-squircle bg-neutral text-neutral-content w-12 h-12">
														<span class="text-2xl icon-[uil--image]"></span>
													</div>
												</label>
											}
											<div>
												<div class="font-bold">{ tribe.Name }</div>
												<div class="text-sm opacity-50">{ tribe.Short.String }</div>
												<div class="text-sm opacity-50">{ tribe.Dpsg.String }</div>
											</div>
										</div>
									</td>
									<th>
										<form
											hx-post="/dash/join"
											hx-swap="main"
											hx-swap="innerHTML"
											hx-headers={ "{\"X-CSRF-Token\": \"" + csrf + "\"}" }
										>
											<input type="hidden" name="tribe" value={ strconv.FormatInt(tribe.ID, 10) }/>
											<button class="btn btn-primary">Beitreten</button>
										</form>
									</th>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}
