// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
)

const createTribe = `-- name: CreateTribe :one
insert into tribes (updated_at, "name")
values (?, ?)
returning id, updated_at, name, short, dpsg, image_id, email_domain, stavo_email
`

type CreateTribeParams struct {
	UpdatedAt int64
	Name      string
}

func (q *Queries) CreateTribe(ctx context.Context, arg CreateTribeParams) (Tribe, error) {
	row := q.db.QueryRowContext(ctx, createTribe, arg.UpdatedAt, arg.Name)
	var i Tribe
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.Name,
		&i.Short,
		&i.Dpsg,
		&i.ImageID,
		&i.EmailDomain,
		&i.StavoEmail,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
delete from groups
where id = ?
limit 1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteTribe = `-- name: DeleteTribe :exec
delete from tribes
where id = ?
limit 1
`

func (q *Queries) DeleteTribe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTribe, id)
	return err
}

const getGroup = `-- name: GetGroup :one
select id, created_at, updated_at, name, short, size, grouping, tribe_id, image_id
from groups
where id = ?
limit 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Short,
		&i.Size,
		&i.Grouping,
		&i.TribeID,
		&i.ImageID,
	)
	return i, err
}

const getGroups = `-- name: GetGroups :many
select id, created_at, updated_at, name, short, size, grouping, tribe_id, image_id
from groups
`

func (q *Queries) GetGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Short,
			&i.Size,
			&i.Grouping,
			&i.TribeID,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsByTribe = `-- name: GetGroupsByTribe :many
select id, created_at, updated_at, name, short, size, grouping, tribe_id, image_id
from groups
where tribe_id = ?
`

func (q *Queries) GetGroupsByTribe(ctx context.Context, tribeID int64) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByTribe, tribeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Short,
			&i.Size,
			&i.Grouping,
			&i.TribeID,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedule = `-- name: GetSchedule :many
select id, start, "end", name, about
from schedule
order by "start" asc
`

func (q *Queries) GetSchedule(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Start,
			&i.End,
			&i.Name,
			&i.About,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTribe = `-- name: GetTribe :one
select id, updated_at, name, short, dpsg, image_id, email_domain, stavo_email
from tribes
where id = ?
limit 1
`

func (q *Queries) GetTribe(ctx context.Context, id int64) (Tribe, error) {
	row := q.db.QueryRowContext(ctx, getTribe, id)
	var i Tribe
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.Name,
		&i.Short,
		&i.Dpsg,
		&i.ImageID,
		&i.EmailDomain,
		&i.StavoEmail,
	)
	return i, err
}

const getTribes = `-- name: GetTribes :many
select id, updated_at, name, short, dpsg, image_id, email_domain, stavo_email
from tribes
`

func (q *Queries) GetTribes(ctx context.Context) ([]Tribe, error) {
	rows, err := q.db.QueryContext(ctx, getTribes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tribe
	for rows.Next() {
		var i Tribe
		if err := rows.Scan(
			&i.ID,
			&i.UpdatedAt,
			&i.Name,
			&i.Short,
			&i.Dpsg,
			&i.ImageID,
			&i.EmailDomain,
			&i.StavoEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
